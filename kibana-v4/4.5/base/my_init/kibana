#!/bin/sh
# Init script for kibana
# Maintained by Laurent Vincentelli <lvi@minsys.io> for cloud.minsys.io compatibility. 
# Generated by pleaserun.
# Implemented based on LSB Core 3.1:
#   * Sections: 20.2, 20.3
#
### BEGIN INIT INFO
# Provides:          kibana
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description:
# Description:       no description given
### END INIT INFO

#Source the lsb functions to perform the following operations
 . /lib/lsb/init-functions

PATH=/sbin:/usr/sbin:/bin:/usr/bin
export PATH

name=kibana
program=/opt/kibana/bin/kibana
args=''
pidfile="/var/run/$name.pid"

[ -r /etc/default/$name ] && . /etc/default/$name

trace() {
  logger -t "/etc/init.d/kibana" "$@"
}

emit() {
  trace "$@"
  echo "$@"
}

start() {
  log_daemon_msg "OK, LSB functions & /etc/default/$name variables are correctly sourced"
  log_daemon_msg "Kibana user and group are $user:$group"
  log_daemon_msg "Starting $name, Explore & Visualize Your Data @ cloud.minsys.io"
  log_daemon_msg "Preparing environment..." 
  log_daemon_msg "OK, $name home directory is /opt/kibana/"
  log_daemon_msg "OK, $name config directory is /opt/kibana/config"
  log_daemon_msg "Consider modifying /opt/kibana/config/kibana.yml to customize conf."
  log_daemon_msg "Ensure the log directory is setup correctly" 
  # Ensure the log directory is setup correctly.
  [ ! -d "/var/log/kibana/" ] && mkdir "/var/log/kibana/"
  chown "$user":"$group" "/var/log/kibana/"
  chmod 755 "/var/log/kibana/"
  log_daemon_msg "OK, log directory setup correctly, in /var/log/kibana"

  # Setup any environmental stuff beforehand


  # Run the program!
  log_daemon_msg "Running the program!"
  log_daemon_msg "Daemon is at : $program"
  chroot --userspec "$user":"$group" "$chroot" sh -c "

    cd \"$chdir\"
    exec \"$program\" $args
  " >> /var/log/kibana/kibana.stdout 2>> /var/log/kibana/kibana.stderr &

  # Generate the pidfile from here. If we instead made the forked process
  # generate it there will be a race condition between the pidfile writing
  # and a process possibly asking for status.
  echo $! > $pidfile

  trace "$name started"
  log_daemon_msg "OK, $name started, PID file : $pidfile"
  log_daemon_msg "OK, enjoy use by connecting with http://localhost:5601"
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if status ; then
    pid=$(cat "$pidfile")
    trace "Killing $name (pid $pid) with SIGTERM"
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5 ; do
      trace "Waiting $name (pid $pid) to die..."
      status || break
      sleep 1
    done
    if status ; then
      emit "$name stop failed; still running."
    else
      trace "$name stopped."
      log_daemon_msg "OK, $name stopped"
    fi
  fi
}

status() {
  if [ -f "$pidfile" ] ; then
    pid=$(cat "$pidfile")
    if ps -p $pid > /dev/null 2> /dev/null ; then
      # process by this pid is running.
      # It may not be our pid, but that's what you get with just pidfiles.
      # TODO(sissel): Check if this process seems to be the same as the one we
      # expect. It'd be nice to use flock here, but flock uses fork, not exec,
      # so it makes it quite awkward to use in this case.
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

force_stop() {
  if status ; then
    stop
    status && kill -KILL $(cat "$pidfile")
  fi
}


case "$1" in
  force-start|start|stop|force-stop|restart)
    trace "Attempting '$1' on kibana"
    ;;
esac

case "$1" in
  force-start)
    PRESTART=no
    exec "$0" start
    ;;
  start)
    status
    code=$?
    if [ $code -eq 0 ]; then
      emit "$name is already running"
      exit $code
    else
      start
      exit $?
    fi
    ;;
  stop) stop ;;
  force-stop) force_stop ;;
  status)
    status
    code=$?
    if [ $code -eq 0 ] ; then
      emit "$name is running"
    else
      emit "$name is not running"
    fi
    exit $code
    ;;
  restart)

    stop && start
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|force-start|stop|force-start|force-stop|status|restart}" >&2
    exit 3
  ;;
esac

exit $?